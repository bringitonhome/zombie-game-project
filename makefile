BINARY = sfml-app.out

# Compiler options and flags
CXX = g++
CXXFLAGS = -Wall -Wno-switch -g
DFLAGS = -MM

# Path to include directory
# TODO improve this?
INCLUDE_DIR = ./include

# Libraries required for linking
LIBS = -lsfml-graphics -lsfml-system -lsfml-window

# Run Options
#COMMANDLINE_OPTIONS = /dev/ttyS0

#-- Directory structure and files --#

# Subdirs to search for additional source files
SUBDIRS := $(shell ls -F | grep "\/" )
DIRS := ./ $(SUBDIRS)
SRC_FILES := $(foreach d, $(DIRS), $(wildcard $(d)*.cpp))
OBJECTS = $(patsubst %.cpp, %.o, $(SRC_FILES))
DEPENDENCIES = $(patsubst %.cpp, %.d, $(SRC_FILES))

#-- Rules --#

all: $(BINARY)

$(BINARY): $(OBJECTS) $(DEPENDENCIES)
	$(CXX) -o $(BINARY) $(OBJECTS) $(LIBS)

# Produce all object files
%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@ -I $(INCLUDE_DIR)

# Create .d files
%.d: %.cpp
# $(CXX) $(DFLAGS) $< -MT "$*.o $*.d" -MF $*.d
	$(CXX) $(DFLAGS) $< -MT "$*.o $*.d" -MF "$*.d" -I $(INCLUDE_DIR)

# Include dependencies (if there are any)
ifneq ($(strip $(DEPENDENCIES)), "" )
  include $(DEPENDENCIES)
endif

# Build and run the project
run: $(BINARY)
#    ./$(BINARY) $(COMMANDLINE_OPTIONS)
	./$(BINARY)

# Cleaning routines
# TODO make a routine to remove all .o and .d files not generated by make?
.PHONY: clean
clean:
	rm $(BINARY) $(OBJECTS)

.PHONY: depclean
depclean:
	rm -f $(DEPENDENCIES)

